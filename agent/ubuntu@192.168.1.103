import time
import sys
import random
import socket
from socket import AF_INET, SOCK_DGRAM
import pickle
import fcntl
import struct
import psutil
import platform
import netifaces
import array
import os
import subprocess

LEADER_PING_TYPE=14000
LEADER_CREATE_SERVICE_TYPE=15000
LEADER_DELETE_CONTAINER_TYPE=16000
REGISTRATION_TYPE=1000
AGENT_PORT=9000
CLUSTER_LEADER_PORT=7000
cluster_leader_address=("192.168.1.105",CLUSTER_LEADER_PORT)

class cluster_message_class:
	
	def __init__(self,msg_type="",device_ip=""):
		self.device_ip=device_ip
		self.msg_type=msg_type
		
	def get_msg_type(self):
		return self.msg_type
		
	def get_device_ip(self):
		return self.device_ip
	
	def set_host_name(self,host_name):
		self.host_name=host_name
	
	def get_host_name(self):
		return self.host_name



class agent_message_class:
	def __init__(self,msg_type=0,command=0,seq=-1):
		self.msg_type=msg_type
		self.command=command
		self.sequence=seq
	
	def get_seq(self):
		return self.sequence
	
	def get_msg_type(self):
		return self.msg_type
		
	def get_command(self):
		return self.command



class device_HW_characteristics:
	def __init__(self,processor=0,cores=0,frequency=0,available_ram=0,total_ram=0,sensors=0):
		self.available_ram=available_ram
		self.cores=cores
		self.current_frequency=frequency
		self.processor=processor
		self.sensors=sensors
		self.seq=-1
		
		if(total_ram<=4000000000):
			self.position="end"
		elif(total_ram>4000000000 and total_ram<12000000000):
			self.position="edge"
		elif(total_ram>12000000000):
			self.position="cloud"
			
	def get_processor(self):
		return self.processor
	
	def get_position(self):
		return self.position
	
	def get_cores(self):
		return self.cores
		
	def get_available_ram(self):
		return self.available_ram
		
	def get_current_frequency(self):
		return self.current_frequency
	
	def get_sensors(self):
		return self.sensors
	
	def set_seq(self,seq):
		self.seq=seq
	
	def get_seq(self):
		return(self.seq)
		
		
def main():
	
	global cluster_leader_address
	global REGISTRATION_TYPE
	global LEADER_DELETE_CONTAINER_TYPE
	global LEADER_PING_TYPE
	global LEADER_DELETE_CONTAINER_TYPE
	
	def getAllInterfaces():
		return os.listdir('/sys/class/net/')
	
	def get_ip_address(ifname):
		s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		return socket.inet_ntoa(fcntl.ioctl(s.fileno(),0x8915,struct.pack('256s',  bytes(ifname[:15], 'utf-8')))[20:24])
	
	def is_interface_up(interface):
		addr = netifaces.ifaddresses(interface)
		return netifaces.AF_INET in addr
	

	interfaces=getAllInterfaces()
	final_interface=""
	
	for i in range(0,len(interfaces)):
		
		if(is_interface_up(interfaces[i])==True):
			if(interfaces[i][0]=='e'):
				final_interface=interfaces[i]
				break
			elif(interfaces[i][0]=='w'):
				final_interface=interfaces[i]
    

	print("final_interface=",final_interface)
		
	print(get_ip_address(final_interface))  # '192.168.0.110'
		
	my_ip=get_ip_address(final_interface)
	address=(my_ip,AGENT_PORT)
	sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
	sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	sock.bind(address)
	
	#-------------------------------------------------------------------------
	#Register to cluster
	
	udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	udp_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,1)
	udp_sock.settimeout(5.0)
	
	cluster_message=pickle.dumps(cluster_message_class(REGISTRATION_TYPE,my_ip))
	ack_received=0
	
	#Use at least once semantics
	while(1):
		
		udp_sock.sendto(cluster_message,cluster_leader_address)
		
		while(1):
			try:
				data, addr = udp_sock.recvfrom(1024)
				ack_received=1
				print("Got a right ack")
				
			except socket.timeout:
				print("Timeout")
				break
			
		if(ack_received==1):
			break
	
	#-------------------------------------------------------------------------
	
	exp_seq_num=1

	while(1):
		rcvmsg=agent_message_class()
		rcvmsg, addr = sock.recvfrom(1024)
		rcvmsg=pickle.loads(rcvmsg)
		print("Got a message from leader,type=",rcvmsg.get_msg_type(),"seq=",rcvmsg.get_seq())
		
		if(rcvmsg.get_seq()<exp_seq_num):
			print("Duplicate packet, send ack")
			reply_msg=device_HW_characteristics()
			reply_msg.set_seq(rcvmsg.get_seq())
			reply_msg=pickle.dumps(reply_msg)
			sock.sendto(reply_msg,addr)
		else:
			exp_seq_num=rcvmsg.get_seq()+1
			
			if(rcvmsg.get_msg_type()==LEADER_PING_TYPE):
				cpufreq = psutil.cpu_freq()
				svmem = psutil.virtual_memory()
				
				sensors_configuration_file_available=0
				sensors=[]
				try:
					fd=open("sensors_configuration_file.txt","r")
					sensors_configuration_file_available=1
				except IOError:
					print("Could not read sensors configuration file")
				
				if(sensors_configuration_file_available==1):
					while(1):
						line=fd.readline()
						line=line.translate({ord('\n'): None})
						
						if(len(line)==0):
							break
						print(line)
						sensors.append(line)
					
				reply_msg=device_HW_characteristics(platform.processor(),psutil.cpu_count(logical=True),cpufreq.current,svmem.available,svmem.total,sensors)
				reply_msg.set_seq(rcvmsg.get_seq())
				reply_msg=pickle.dumps(reply_msg)
				sock.sendto(reply_msg,addr)
				
			elif(rcvmsg.get_msg_type()==LEADER_CREATE_SERVICE_TYPE):
				
				print("leader asked me to run the command",rcvmsg.get_command())
				
				process=subprocess.Popen(rcvmsg.get_command(), stdout=subprocess. PIPE)
				process.communicate()
				
				
				print("send reply")
				reply_msg=device_HW_characteristics()
				reply_msg.set_seq(rcvmsg.get_seq())
				reply_msg=pickle.dumps(reply_msg)
				sock.sendto(reply_msg,addr)
				
			elif(rcvmsg.get_msg_type()==LEADER_DELETE_CONTAINER_TYPE):
				
				print("leader asked me to delete containers",rcvmsg.get_command())
				
				bashcmd = ["docker","ps","--format","table {{.Names}}\t"]
				
				process=subprocess.Popen(bashcmd, stdout=subprocess. PIPE)
				running_containers,error=process.communicate()
				running_containers=running_containers.decode('utf-8')
				running_containers=running_containers.split()
				
				for i in range(len(running_containers)):
					if(running_containers[i] in rcvmsg.get_command()):
					
						bashcmd = ["docker","container","rm","--force",running_containers[i]]
					
						process=subprocess.Popen(bashcmd, stdout=subprocess. PIPE)
						output,error=process.communicate()
				
				
				print("send reply")
				reply_msg=device_HW_characteristics()
				reply_msg.set_seq(rcvmsg.get_seq())
				reply_msg=pickle.dumps(reply_msg)
				sock.sendto(reply_msg,addr)
				
	
if __name__ == "__main__":
	
	main()


